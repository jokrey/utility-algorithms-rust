Author: jokrey

Simple, High-Level wrapper, that adds some functionality to the most basic byte stream.

Useful for simple, standardized inter programming language communication. Where build in high level constructs are not available.
Inter-programming Language entails that both sides will only be able to use the most basic, low level byte-"streams" (or whatever expression of that is available).
Writing a number bytes is easy here. However it gets tricky when the receiver doesn't know how many bytes to expect.
      For example when transmitting a file or a complex data structur such as a string.
Sends and reads multiple byte arrays(chunks) of completly variable length over a single established connection.
      Apart from that some very basic(and common) data types of fixed length are also supported by the protocol.
      (byte, byte arrays of fixed length, int16(twos_compl), int32(twos_compl), int64(twos_compl), float32(IEEE-754), float64(IEEE-754))
           NOTE: Booleans are not supported since their implementation greatly differs between common languages.

The idea is that after establishing a connection the client sends a "cause" byte, indicating what kind of complex "conversation" it would like to have.
After that both sides have to each know exactly what kind of data the other one wants.

   An Example of a typical "conversation" (usefulness of the example data in the braces is debatable ;) ):
|           Client            |            Server            |
|                             |    waitForNewConnection      |
|     establishConnection     |  handleConnection(newThread) |
|                             |     waitForInitialCause      |
|     sendInitialCause        |      receiveInitialCause     |
repeat n times:
|                             |         waitForCause         |
|         sendCause           |         receiveCause         |
|                             |          waitForInt          |
|         sendInt x           |          receiveInt          |
|         waitForInt          |      doOperationOnX (x*x)    |
|         receiveInt          |         sendInt (x*x)        |
|                             | waitForChunkOfVariableLength |
end repeat
|      closeConnection        | closeConnection(finishThread)|

More complex, simultaneous, two way communication (for a example a game server may need), can also be achieved using this protocol.
   Then both sides would have 2 simultaneous, one sided(likely too slow otherwise), conversations.
   However that may not be fast enough. Then fixed package size, with a fixed cause at byte position 0, and fixed data sizes being send in the same chunk would be preferable.
   This protocol may then be overkill.


MCNP <=> Multi Chunk Network Protocol

An mcnp api has to support:
  Should support sending any data type over the specified serialization in RawToFromTransformer.
  Can support special methods for those datatypes. Semantic mcnp functionality requires sending and receiving: bytes, int32, int64

  SEMANTIC WRAPPERS:
    Cause functionality:
      - send_cause(int32)
         send_fixed_chunk_int32
      - read_cause() int32
    Variable Chunk functionality:
        - start_variable_chunk(int64(chunk_length))
           send_fixed_chunk_int64
        - send_variable_chunk_part(uint8array)
           send_fixed_chunk_uint8array
        - read_variable_chunk() uint8array
           length = read_fixed_int64
           read_fixed(length)

    OPTIONALS and comfort functionality:
      - send_variable_array(uint8array)
         start_chunk & send_fixed_chunk_uint8array
      - read_variable_array() uint8array
         read_chunk_length
      - send_variable_utf8(utf8)
         convert_utf8 & start_chunk & send_fixed_chunk_uint8array
      - read_variable_utf8() utf8






Test:
  server listening to port 17731
  server responding to initial connection cause 1:
     read 1 byte
     echo 1 byte
  server responding to cause 12, for initial cause 1:
      read 1 byte
      read and store 4 bytes as int32
      read 8 bytes (i64)
      read 8 bytes (f64)
      echo i32
  server responding to cause 8, for initial cause 1:
      read variable bytes
      echo bytes
      read variable bytes as string
      echo string
      read variable (null/none type)

  client connecting to port 17731
  !! client connecting with initial cause 1
     r = 1 random byte
     client sending r
     client read 1 byte assert == r
   ! client send cause 12
     client send 1 byte
     i32 = 1 random i32
     client send i32
     client send i64
     client send f64
     client read 4 bytes as int32 assert = i32
   ! client send cause 8
     client send variable, random bytes
     stringx = 1 random string
     client send stringx
     client read variable bytes as string assert = stringx
     client send null type